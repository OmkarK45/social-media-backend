type AuthResponse {
  session: Session!
  success: Boolean!
  user: User!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

type Comment {
  body: String!
  id: String!
  isMine: Boolean!
  post: Post!
  user: User!
}

input CreateCommentInput {
  body: String!
  postId: String!
}

type CreateCommentObject {
  body: String!
  id: String!
}

input CreatePostInput {
  caption: String!
  gifLink: String
  media: FileUpload
}

scalar DateTime

input EditCommentInput {
  body: String!
  id: String!
  postId: String!
}

input EditPostInput {
  caption: String!
  gifLink: String
  id: String!
}

input EditProfileInput {
  avatar: FileUpload
  bio: String
  coverImage: FileUpload
  firstName: String
  lastName: String
  username: String
}

"""The `Upload` scalar type represents a file upload."""
scalar FileUpload

type FollowResponse {
  ok: Boolean!
}

input FollowUserInput {
  username: String!
}

type Hashtag {
  hashtag: String!
  id: ID!
  posts(after: ID, before: ID, first: Int, last: Int): HashtagPostsConnection!
}

type HashtagPostsConnection {
  edges: [HashtagPostsConnectionEdge]!
  pageInfo: PageInfo!
}

type HashtagPostsConnectionEdge {
  cursor: String!
  node: Post!
}

type Like {
  id: String!
  post: Post!
  user: User!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  changePassword(input: ChangePasswordInput!): ResultResponse!
  createComment(input: CreateCommentInput!): CreateCommentObject!
  createPost(input: CreatePostInput!): Post!
  deleteComment(id: String!): ResultResponse!
  deletePost(id: String!): ResultResponse!
  editComment(input: EditCommentInput!): ResultResponse!
  editPost(input: EditPostInput!): Post!
  editProfile(input: EditProfileInput!): User!
  followUser(input: FollowUserInput!): FollowResponse!
  logout: ResultResponse!
  signIn(input: SignInInput!): AuthResponse!
  signUp(input: SignUpInput!): AuthResponse!
  toggleLike(id: String!): ResultResponse!
  unfollowUser(input: FollowUserInput!): FollowResponse!
}

type Notification {
  createdAt: DateTime!
  dispatcher: User!
  id: ID!
  like: Like
  post: Post
  receiver: User!
  type: String!
  updatedAt: DateTime!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  blurHash: String
  caption: String
  comments(after: ID, before: ID, first: Int, last: Int): PostCommentsConnection!
  createdAt: DateTime!
  gifImage: String
  hashtags(after: ID, before: ID, first: Int, last: Int): PostHashtagsConnection!
  id: String!
  image: String
  isLiked: Boolean!
  isMine: Boolean!
  likes(after: ID, before: ID, first: Int, last: Int): PostLikesConnection!
  updatedAt: DateTime!
  user: User!
}

type PostCommentsConnection {
  edges: [PostCommentsConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostCommentsConnectionEdge {
  cursor: String!
  node: Comment!
}

type PostHashtagsConnection {
  edges: [PostHashtagsConnectionEdge]!
  pageInfo: PageInfo!
}

type PostHashtagsConnectionEdge {
  cursor: String!
  node: Hashtag!
}

type PostLikesConnection {
  edges: [PostLikesConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostLikesConnectionEdge {
  cursor: String!
  node: Like!
}

type Query {
  feed(after: ID, before: ID, first: Int, last: Int): QueryFeedConnection!
  health: String!
  me: User!
  notifications(after: ID, before: ID, first: Int, isRead: Boolean! = false, last: Int): QueryNotificationsConnection!
  popularHashtags(after: ID, before: ID, first: Int, last: Int): QueryPopularHashtagsConnection!
  postsByHashtag(after: ID, before: ID, first: Int, hashtag: String!, last: Int): QueryPostsByHashtagConnection!
  postsContainingHashtag(after: ID, before: ID, first: Int, hashtag: String!, last: Int): QueryPostsContainingHashtagConnection!
  searchByHashtag(after: ID, before: ID, first: Int, keyword: String!, last: Int): QuerySearchByHashtagConnection!
  searchUser(after: ID, before: ID, first: Int, keyword: String!, last: Int): QuerySearchUserConnection!
  seePost(id: String!): Post!
  seeProfile(username: String!): User!
  sessionById(id: String!): Session!
  whoToFollow(after: ID, before: ID, first: Int, last: Int): QueryWhoToFollowConnection!
}

type QueryFeedConnection {
  edges: [QueryFeedConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryFeedConnectionEdge {
  cursor: String!
  node: Post!
}

type QueryNotificationsConnection {
  edges: [QueryNotificationsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryNotificationsConnectionEdge {
  cursor: String!
  node: Notification!
}

type QueryPopularHashtagsConnection {
  edges: [QueryPopularHashtagsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryPopularHashtagsConnectionEdge {
  cursor: String!
  node: Hashtag!
}

type QueryPostsByHashtagConnection {
  edges: [QueryPostsByHashtagConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryPostsByHashtagConnectionEdge {
  cursor: String!
  node: Post!
}

type QueryPostsContainingHashtagConnection {
  edges: [QueryPostsContainingHashtagConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryPostsContainingHashtagConnectionEdge {
  cursor: String!
  node: Post!
}

type QuerySearchByHashtagConnection {
  edges: [QuerySearchByHashtagConnectionEdge]!
  pageInfo: PageInfo!
}

type QuerySearchByHashtagConnectionEdge {
  cursor: String!
  node: Post!
}

type QuerySearchUserConnection {
  edges: [QuerySearchUserConnectionEdge]!
  pageInfo: PageInfo!
}

type QuerySearchUserConnectionEdge {
  cursor: String!
  node: User!
}

type QueryWhoToFollowConnection {
  edges: [QueryWhoToFollowConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryWhoToFollowConnectionEdge {
  cursor: String!
  node: User!
}

type ResultResponse {
  success: Boolean!
}

type Session {
  createdAt: DateTime!
  expiresAt: DateTime
  id: ID!
  updatedAt: DateTime!
  userId: ID!
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  username: String!
}

type User {
  avatar: String
  bio: String
  coverImage: String
  coverImageBg: String
  createdAt: DateTime!
  email: String!
  firstName: String!
  followers(after: ID, before: ID, first: Int, last: Int): UserFollowersConnection!
  followersCount: Int!
  following(after: ID, before: ID, first: Int, last: Int): UserFollowingConnection!
  followingCount: Int!
  id: ID!
  isFollowing: Boolean!
  isMe: Boolean!
  lastName: String
  posts(after: ID, before: ID, first: Int, last: Int): UserPostsConnection!
  updatedAt: DateTime!
  username: String!
}

type UserFollowersConnection {
  edges: [UserFollowersConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserFollowersConnectionEdge {
  cursor: String!
  node: User!
}

type UserFollowingConnection {
  edges: [UserFollowingConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserFollowingConnectionEdge {
  cursor: String!
  node: User!
}

type UserPostsConnection {
  edges: [UserPostsConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserPostsConnectionEdge {
  cursor: String!
  node: Post!
}
