type AuthResponse {
  success: Boolean!
  user: User!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CreatePostInput {
  caption: String!
  media: FileUpload!
}

scalar DateTime

input EditPostInput {
  caption: String!
  id: String!
}

input EditProfileInput {
  avatar: String
  bio: String
  firstName: String!
  lastName: String
  username: String!
}

type FeedPosts {
  caption: String
  id: String!
  image: String
  user: User!
}

"""The `Upload` scalar type represents a file upload."""
scalar FileUpload

input FollowUserInput {
  username: String!
}

type FollowerResponse {
  followers: [User!]!
  totalFollowers: Int!
  totalPages: Int!
}

type FollowingResponse {
  following: [User!]!
  totalFollowing: Int!
  totalPages: Int!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  changePassword(input: ChangePasswordInput!): ResultResponse!
  createPost(input: CreatePostInput!): Post!
  deletePost(id: String!): ResultResponse!
  editPost(input: EditPostInput!): Post!
  editProfile(input: EditProfileInput!): User!
  followUser(input: FollowUserInput!): User!
  logout: ResultResponse!

  """Searches user whose username matches given keyword"""
  searchUser(keyword: String!): SearchResponse!

  """Logs the user into the application"""
  signIn(input: SignInInput!): AuthResponse!

  """Signup new users"""
  signUp(input: SignUpInput!): AuthResponse!
  unfollowUser(input: FollowUserInput!): User!
}

type Post {
  caption: String
  id: String!
  image: String
}

type ProfileResponse {
  user: User!
}

type Query {
  feed(offset: Int!): [FeedPosts!]!
  health: String!
  me: User!
  seeProfile(username: String!): ProfileResponse!
}

type ResultResponse {
  success: Boolean!
}

type SearchResponse {
  total: Int!
  users: [User!]!
}

type Session {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  userId: ID!
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  username: String!
}

type User {
  avatar: String
  bio: String
  createdAt: DateTime!
  email: String!
  firstName: String!
  followers(page: Int!): FollowerResponse!
  following(page: Int!): FollowingResponse!
  id: ID!
  lastName: String
  updatedAt: DateTime!
  username: String!
}
