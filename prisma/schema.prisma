// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum NodeType {
  User
  Comment
  Post
}

model User {
  id             String    @id @default(uuid())
  firstName      String
  lastName       String?
  username       String    @unique
  email          String    @unique
  hashedPassword Bytes
  bio            String?
  avatar         String? // we would probably want this to be from cloudinary 
  posts          Post[]
  likes          Like[]
  comments       Comment[]
  followers      User[]    @relation("FollowRelation", references: [id])
  following      User[]    @relation("FollowRelation", references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sessions       Session[]
  nodeType       NodeType  @default(User)
}

model Session {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}

model Post {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  image     String?
  caption   String?
  likes     Like[]
  hashtags  Hashtag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  nodeType  NodeType  @default(Post)

}

model Like {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId])
}

model Hashtag {
  id        String   @id @default(uuid())
  hashtag   String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nodeType  NodeType @default(Comment)

}

model Foo {
  id   Int    @id @default(autoincrement())
  name String
  bars Bar[]

}

model Bar {
  id        Int      @id @default(autoincrement())
  foo       Foo      @relation(fields: [fooId], references: [id])
  fooId     Int
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
